///**
// * Copyright (c) Microsoft Corporation. All rights reserved.
// * Licensed under the MIT License. See License.txt in the project root for
// * license information.
// *
// * Code generated by Microsoft (R) AutoRest Code Generator.
// */
//
//package com.microsoft.azure.management.resources.implementation;
//
//import com.azure.core.annotation.*;
//import com.azure.core.http.HttpPipeline;
//import com.azure.core.http.rest.PagedFlux;
//import com.azure.core.http.rest.PagedResponse;
//import com.azure.core.http.rest.Response;
//import com.azure.core.implementation.RestProxy;
//import com.azure.core.management.PagedList;
//import com.microsoft.azure.management.resources.fluentcore.collection.InnerSupportsDelete;
//import com.microsoft.azure.management.resources.fluentcore.collection.InnerSupportsListing;
//import reactor.core.publisher.Mono;
//
///**
// * An instance of this class provides access to all the operations defined
// * in PolicyAssignments.
// */
//public class PolicyAssignmentsInner implements InnerSupportsDelete<PolicyAssignmentInner>, InnerSupportsListing<PolicyAssignmentInner> {
//    /** The Retrofit service to perform REST calls. */
//    private PolicyAssignmentsService service;
//    /** The service client containing this operation class. */
//    private PolicyClientImpl client;
//
//    /**
//     * Initializes an instance of PolicyAssignmentsInner.
//     *
//     * @param pipeline the Retrofit instance built from a Retrofit Builder.
//     * @param client the instance of the service client containing this operation class.
//     */
//    public PolicyAssignmentsInner(HttpPipeline pipeline, PolicyClientImpl client) {
//        this.service = RestProxy.create(PolicyAssignmentsService.class, pipeline);
//        this.client = client;
//    }
//
//    @Override
//    public Mono<PolicyAssignmentInner> deleteAsync(String resourceGroupName, String resourceName) {
//        return null;
//    }
//
//    @Override
//    public PagedFlux<PolicyAssignmentInner> listAsync() {
//        return null;
//    }
//
//    @Override
//    public PagedFlux<PolicyAssignmentInner> listByResourceGroupAsync(String resourceGroup) {
//        return null;
//    }
//
//    @Override
//    public PagedList<PolicyAssignmentInner> list() {
//        return null;
//    }
//
//    @Override
//    public PagedList<PolicyAssignmentInner> listByResourceGroup(String resourceGroupName) {
//        return null;
//    }
//
//    /**
//     * The interface defining all the services for PolicyAssignments to be
//     * used by Retrofit to perform actually REST calls.
//     */
//    interface PolicyAssignmentsService {
//        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.resources.PolicyAssignments delete" })
//        @Delete("{scope}/providers/Microsoft.Authorization/policyAssignments/{policyAssignmentName}")
//        Mono<Response<PolicyAssignmentInner>> delete(@PathParam(value = "scope", encoded = true) String scope, @PathParam("policyAssignmentName") String policyAssignmentName, @QueryParam("api-version") String apiVersion, @HeaderParam("accept-language") String acceptLanguage, @HeaderParam("User-Agent") String userAgent);
//
//        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.resources.PolicyAssignments create" })
//        @Put("{scope}/providers/Microsoft.Authorization/policyAssignments/{policyAssignmentName}")
//        Mono<Response<PolicyAssignmentInner>> create(@PathParam(value = "scope", encoded = true) String scope, @PathParam("policyAssignmentName") String policyAssignmentName, @BodyParam("body") PolicyAssignmentInner parameters, @QueryParam("api-version") String apiVersion, @HeaderParam("accept-language") String acceptLanguage, @HeaderParam("User-Agent") String userAgent);
//
//        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.resources.PolicyAssignments get" })
//        @Get("{scope}/providers/Microsoft.Authorization/policyAssignments/{policyAssignmentName}")
//        Mono<Response<PolicyAssignmentInner>> get(@PathParam(value = "scope", encoded = true) String scope, @PathParam("policyAssignmentName") String policyAssignmentName, @QueryParam("api-version") String apiVersion, @HeaderParam("accept-language") String acceptLanguage, @HeaderParam("User-Agent") String userAgent);
//
//        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.resources.PolicyAssignments listByResourceGroup" })
//        @Get("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Authorization/policyAssignments")
//        Mono<PagedResponse<PolicyAssignmentInner>> listByResourceGroup(@PathParam("resourceGroupName") String resourceGroupName, @PathParam("subscriptionId") String subscriptionId, @QueryParam(value = "$filter", encoded = true) String filter, @QueryParam("api-version") String apiVersion, @HeaderParam("accept-language") String acceptLanguage, @HeaderParam("User-Agent") String userAgent);
//
//        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.resources.PolicyAssignments listForResource" })
//        @Get("subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{parentResourcePath}/{resourceType}/{resourceName}/providers/Microsoft.Authorization/policyAssignments")
//        Mono<PagedResponse<PolicyAssignmentInner>> listForResource(@PathParam("resourceGroupName") String resourceGroupName, @PathParam("resourceProviderNamespace") String resourceProviderNamespace, @PathParam(value = "parentResourcePath", encoded = true) String parentResourcePath, @PathParam(value = "resourceType", encoded = true) String resourceType, @PathParam("resourceName") String resourceName, @PathParam("subscriptionId") String subscriptionId, @QueryParam("$filter") String filter, @QueryParam("api-version") String apiVersion, @HeaderParam("accept-language") String acceptLanguage, @HeaderParam("User-Agent") String userAgent);
//
//        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.resources.PolicyAssignments list" })
//        @Get("subscriptions/{subscriptionId}/providers/Microsoft.Authorization/policyAssignments")
//        Mono<PagedResponse<PolicyAssignmentInner>> list(@PathParam("subscriptionId") String subscriptionId, @QueryParam("$filter") String filter, @QueryParam("api-version") String apiVersion, @HeaderParam("accept-language") String acceptLanguage, @HeaderParam("User-Agent") String userAgent);
//
//        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.resources.PolicyAssignments deleteById" })
//        @Delete("{policyAssignmentId}")
//        Mono<Response<PolicyAssignmentInner>> deleteById(@PathParam(value = "policyAssignmentId", encoded = true) String policyAssignmentId, @QueryParam("api-version") String apiVersion, @HeaderParam("accept-language") String acceptLanguage, @HeaderParam("User-Agent") String userAgent);
//
//        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.resources.PolicyAssignments createById" })
//        @Put("{policyAssignmentId}")
//        Mono<Response<PolicyAssignmentInner>> createById(@PathParam(value = "policyAssignmentId", encoded = true) String policyAssignmentId, @BodyParam("body") PolicyAssignmentInner parameters, @QueryParam("api-version") String apiVersion, @HeaderParam("accept-language") String acceptLanguage, @HeaderParam("User-Agent") String userAgent);
//
//        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.resources.PolicyAssignments getById" })
//        @Get("{policyAssignmentId}")
//        Mono<Response<PolicyAssignmentInner>> getById(@PathParam(value = "policyAssignmentId", encoded = true) String policyAssignmentId, @QueryParam("api-version") String apiVersion, @HeaderParam("accept-language") String acceptLanguage, @HeaderParam("User-Agent") String userAgent);
//
//        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.resources.PolicyAssignments listByResourceGroupNext" })
//        @Get("{nextUrl}")
//        Mono<PagedResponse<PolicyAssignmentInner>> listByResourceGroupNext(@PathParam("nextUrl") String nextUrl, @HeaderParam("accept-language") String acceptLanguage, @HeaderParam("User-Agent") String userAgent);
//
//        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.resources.PolicyAssignments listForResourceNext" })
//        @Get("{nextUrl}")
//        Mono<PagedResponse<PolicyAssignmentInner>> listForResourceNext(@PathParam("nextUrl") String nextUrl, @HeaderParam("accept-language") String acceptLanguage, @HeaderParam("User-Agent") String userAgent);
//
//        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.resources.PolicyAssignments listNext" })
//        @Get("{nextUrl}")
//        Mono<PagedResponse<PolicyAssignmentInner>> listNext(@PathParam("nextUrl") String nextUrl, @HeaderParam("accept-language") String acceptLanguage, @HeaderParam("User-Agent") String userAgent);
//
//    }
//
//}
