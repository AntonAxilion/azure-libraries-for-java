/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 * <p>
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.resources.implementation;

import com.azure.core.annotation.*;
import com.azure.core.http.HttpPipeline;
import com.azure.core.http.rest.*;
import com.azure.core.management.PagedList;
import com.azure.core.util.logging.ClientLogger;
import reactor.core.Exceptions;
import reactor.core.publisher.Mono;

/**
 * An instance of this class provides access to all the operations defined
 * in Providers.
 */
public class ProvidersInner {
    /**
     * The Retrofit service to perform REST calls.
     */
    private ProvidersService service;
    /**
     * The service client containing this operation class.
     */
    private ResourceManagementClientImpl client;


    private final ClientLogger logger = new ClientLogger(ProvidersInner.class);

    /**
     * Initializes an instance of ProvidersInner.
     *
     * @param client the instance of the service client containing this operation class.
     */
    public ProvidersInner(HttpPipeline pipeline, ResourceManagementClientImpl client) {
        this.service = RestProxy.create(ProvidersService.class, pipeline);
        this.client = client;
    }


    public ProviderInner get(String resourceProviderNamespace) {
        return this.getAsync(resourceProviderNamespace).block();
    }

    /**
     * Gets the specified resource provider.
     *
     * @param resourceProviderNamespace The namespace of the resource provider.
     * @return the observable to the ProviderInner object
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    public Mono<ProviderInner> getAsync(String resourceProviderNamespace) {
        if (resourceProviderNamespace == null) {
            throw new IllegalArgumentException("Parameter resourceProviderNamespace is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        final String expand = null;
        return service.get(this.getHostUrl(), resourceProviderNamespace, this.client.subscriptionId(), expand, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
                .flatMap(res -> Mono.just(res.getValue()));
//                .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<ProviderInner>>>() {
//                    @Override
//                    public Observable<ServiceResponse<ProviderInner>> call(Response<ResponseBody> response) {
//                        try {
//                            ServiceResponse<ProviderInner> clientResponse = getDelegate(response);
//                            return Observable.just(clientResponse);
//                        } catch (Throwable t) {
//                            return Observable.error(t);
//                        }
//                    }
//                });
    }

    public PagedList<ProviderInner> list() {
        PagedResponse<ProviderInner> response = listProvidersFirstPage().block();
        return new PagedList<ProviderInner>(response) {
            @Override
            public Page<ProviderInner> nextPage(String nextPageLink) {
                return listProvidersNextPage(nextPageLink).block();
            }
        };
    }

    public PagedFlux<ProviderInner> listAsync() {
        return new PagedFlux<>(
                () -> listProvidersFirstPage(),
                continuationToken -> listProvidersNextPage(continuationToken));
    }

    /*
     * Calls the service and retrieve first page result. It makes one call and retrieve {@code
     * DEFAULT_MAX_PAGE_RESULTS} values.
     */
    private Mono<PagedResponse<ProviderInner>> listProvidersFirstPage() {
        try {
            return service.list(this.client.getAzureClient().restClient().getBaseURL().toString(),
                    this.client.subscriptionId(), null, null, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
                    .doOnRequest(ignored -> logger.info("Listing deployments"))
                    .doOnSuccess(response -> logger.info("Listed deployments"))
                    .doOnError(error -> logger.warning("Failed to list deployments", error));
        } catch (RuntimeException ex) {
            return Mono.error(logger.logExceptionAsError(Exceptions.propagate(ex)));
        }
    }


    /*
     * Gets attributes of all the secrets given by the {@code nextPageLink} that was retrieved from a call to
     * {@link SecretAsyncClient#listSecrets()}.
     *
     * @param continuationToken The {@link PagedResponse#nextLink()} from a previous, successful call to one of the
     * list operations.
     * @return A {@link Mono} of {@link PagedResponse<SecretProperties>} from the next page of results.
     */
    private Mono<PagedResponse<ProviderInner>> listProvidersNextPage(String continuationToken) {
        try {
            return service.listNext(continuationToken, this.client.acceptLanguage(), this.client.userAgent())
                    .doOnRequest(ignoredValue -> logger.info("Retrieving the next secrets page - Page {}", continuationToken))
                    .doOnSuccess(response -> logger.info("Retrieved the next secrets page - Page {}", continuationToken))
                    .doOnError(error -> logger.warning("Failed to retrieve the next secrets page - Page {}",
                            continuationToken, error));
        } catch (RuntimeException ex) {
            return Mono.error(logger.logExceptionAsError(Exceptions.propagate(ex)));
        }
    }


    /**
     * Unregisters a subscription from a resource provider.
     *
     * @param resourceProviderNamespace The namespace of the resource provider to unregister.
     * @return the observable to the ProviderInner object
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    public Mono<ProviderInner> unregisterAsync(String resourceProviderNamespace) {
        if (resourceProviderNamespace == null) {
            throw new IllegalArgumentException("Parameter resourceProviderNamespace is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.unregister(this.client.getAzureClient().restClient().getBaseURL().toString(), resourceProviderNamespace, this.client.subscriptionId(), this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
                .flatMap(res -> Mono.just(res.getValue()));
//                .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<ProviderInner>>>() {
//                    @Override
//                    public Observable<ServiceResponse<ProviderInner>> call(Response<ResponseBody> response) {
//                        try {
//                            ServiceResponse<ProviderInner> clientResponse = unregisterDelegate(response);
//                            return Observable.just(clientResponse);
//                        } catch (Throwable t) {
//                            return Observable.error(t);
//                        }
//                    }
//                });
    }


    public Mono<ProviderInner> registerAsync(String resourceProviderNamespace) {
        if (resourceProviderNamespace == null) {
            throw new IllegalArgumentException("Parameter resourceProviderNamespace is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.register(this.getHostUrl(), resourceProviderNamespace, this.client.subscriptionId(), this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
                .flatMap(res -> Mono.just(res.getValue()));
    }

    private String getHostUrl() {
        return this.client.getAzureClient().restClient().getBaseURL().toString();
    }

    /**
     * The interface defining all the services for Providers to be
     * used by Retrofit to perform actually REST calls.
     */
    @Host("{url}")
    @ServiceInterface(name = "ProvidersService")
    interface ProvidersService {
        @Headers({"Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.resources.Providers unregister"})
        @Post("subscriptions/{subscriptionId}/providers/{resourceProviderNamespace}/unregister")
        Mono<Response<ProviderInner>> unregister(@HostParam("url") String url, @PathParam("resourceProviderNamespace") String resourceProviderNamespace, @PathParam("subscriptionId") String subscriptionId, @QueryParam("api-version") String apiVersion, @HeaderParam("accept-language") String acceptLanguage, @HeaderParam("User-Agent") String userAgent);

        @Headers({"Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.resources.Providers register"})
        @Post("subscriptions/{subscriptionId}/providers/{resourceProviderNamespace}/register")
        Mono<Response<ProviderInner>> register(@HostParam("url") String url, @PathParam("resourceProviderNamespace") String resourceProviderNamespace, @PathParam("subscriptionId") String subscriptionId, @QueryParam("api-version") String apiVersion, @HeaderParam("accept-language") String acceptLanguage, @HeaderParam("User-Agent") String userAgent);

        @Headers({"Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.resources.Providers list"})
        @Get("subscriptions/{subscriptionId}/providers")
        @ReturnValueWireType(ProviderInnerPage.class)
        Mono<PagedResponse<ProviderInner>> list(@HostParam("url") String url, @PathParam("subscriptionId") String subscriptionId, @QueryParam("$top") Integer top, @QueryParam("$expand") String expand, @QueryParam("api-version") String apiVersion, @HeaderParam("accept-language") String acceptLanguage, @HeaderParam("User-Agent") String userAgent);

        @Headers({"Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.resources.Providers listAtTenantScope"})
        @Get("providers")
        Mono<Response<Page<ProviderInner>>> listAtTenantScope(@QueryParam("$top") Integer top, @QueryParam("$expand") String expand, @QueryParam("api-version") String apiVersion, @HeaderParam("accept-language") String acceptLanguage, @HeaderParam("User-Agent") String userAgent);

        @Headers({"Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.resources.Providers get"})
        @Get("subscriptions/{subscriptionId}/providers/{resourceProviderNamespace}")
        Mono<Response<ProviderInner>> get(@HostParam("url") String url, @PathParam("resourceProviderNamespace") String resourceProviderNamespace, @PathParam("subscriptionId") String subscriptionId, @QueryParam("$expand") String expand, @QueryParam("api-version") String apiVersion, @HeaderParam("accept-language") String acceptLanguage, @HeaderParam("User-Agent") String userAgent);

        @Headers({"Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.resources.Providers getAtTenantScope"})
        @Get("providers/{resourceProviderNamespace}")
        Mono<Response<ProviderInner>> getAtTenantScope(@PathParam("resourceProviderNamespace") String resourceProviderNamespace, @QueryParam("$expand") String expand, @QueryParam("api-version") String apiVersion, @HeaderParam("accept-language") String acceptLanguage, @HeaderParam("User-Agent") String userAgent);

        @Headers({"Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.resources.Providers listNext"})
        @Get("{nextUrl}")
        Mono<PagedResponse<ProviderInner>> listNext(@PathParam("nextUrl") String nextUrl, @HeaderParam("accept-language") String acceptLanguage, @HeaderParam("User-Agent") String userAgent);

        @Headers({"Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.resources.Providers listAtTenantScopeNext"})
        @Get("{nextUrl}")
        Mono<Response<Page<ProviderInner>>> listAtTenantScopeNext(@PathParam("nextUrl") String nextUrl, @HeaderParam("accept-language") String acceptLanguage, @HeaderParam("User-Agent") String userAgent);

    }

}
