/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 * <p>
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.resources.implementation;

import com.azure.core.annotation.*;
import com.azure.core.http.HttpPipeline;
import com.azure.core.http.rest.*;
import com.azure.core.management.PagedList;
import com.azure.core.util.logging.ClientLogger;
import com.google.common.reflect.TypeToken;
import reactor.core.Exceptions;
import reactor.core.publisher.Mono;

import java.util.List;

/**
 * An instance of this class provides access to all the operations defined
 * in Subscriptions.
 */
public class SubscriptionsInner {
    /**
     * The Retrofit service to perform REST calls.
     */
    private SubscriptionsService service;
    /**
     * The service client containing this operation class.
     */
    private SubscriptionClientImpl client;


    private final ClientLogger logger = new ClientLogger(SubscriptionsInner.class);

    /**
     * Initializes an instance of SubscriptionsInner.
     *
     * @param retrofit the Retrofit instance built from a Retrofit Builder.
     * @param client   the instance of the service client containing this operation class.
     */
    public SubscriptionsInner(HttpPipeline retrofit, SubscriptionClientImpl client) {
        this.service = RestProxy.create(SubscriptionsService.class, retrofit);
        this.client = client;
    }


    public List<LocationInner> listLocations(String subscriptionId) {
        return listLocationsAsync(subscriptionId).block();
    }


    public Mono<List<LocationInner>> listLocationsAsync(String subscriptionId) {
        if (subscriptionId == null) {
            throw new IllegalArgumentException("Parameter subscriptionId is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.listLocations(this.client.getAzureClient().restClient().getBaseURL().toString(), subscriptionId, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
                .flatMap(res -> Mono.just(res.getValue()));
//                .flatMap(response -> {
//
//                });
//                .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<List<LocationInner>>>>() {
//                    @Override
//                    public Observable<ServiceResponse<List<LocationInner>>> call(Response<ResponseBody> response) {
//                        try {
//                            ServiceResponse<PageImpl<LocationInner>> result = listLocationsDelegate(response);
//                            ServiceResponse<List<LocationInner>> clientResponse = new ServiceResponse<List<LocationInner>>(result.body().items(), result.response());
//                            return Observable.just(clientResponse);
//                        } catch (Throwable t) {
//                            return Observable.error(t);
//                        }
//                    }
//                });
    }


    public PagedList<SubscriptionInner> list() {
        PagedResponse<SubscriptionInner> response = listSubscriptionsFirstPage().block();
        return new PagedList<SubscriptionInner>(response) {
            @Override
            public Page<SubscriptionInner> nextPage(String nextPageLink) {
                return listSubscriptionsNextPage(nextPageLink).block();
            }
        };
    }

    public PagedFlux<SubscriptionInner> listAsync() {
        return new PagedFlux<>(
                () -> listSubscriptionsFirstPage(),
                continuationToken -> listSubscriptionsNextPage(continuationToken));
    }

    /*
     * Calls the service and retrieve first page result. It makes one call and retrieve {@code
     * DEFAULT_MAX_PAGE_RESULTS} values.
     */
    private Mono<PagedResponse<SubscriptionInner>> listSubscriptionsFirstPage() {
        try {
            return service.list(this.client.getAzureClient().restClient().getBaseURL().toString(), this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
                    .doOnRequest(ignored -> logger.info("Listing deployments"))
                    .doOnSuccess(response -> logger.info("Listed deployments"))
                    .doOnError(error -> logger.warning("Failed to list deployments", error));
        } catch (RuntimeException ex) {
            return Mono.error(logger.logExceptionAsError(Exceptions.propagate(ex)));
        }
    }


    /*
     * Gets attributes of all the secrets given by the {@code nextPageLink} that was retrieved from a call to
     * {@link SecretAsyncClient#listSecrets()}.
     *
     * @param continuationToken The {@link PagedResponse#nextLink()} from a previous, successful call to one of the
     * list operations.
     * @return A {@link Mono} of {@link PagedResponse<SecretProperties>} from the next page of results.
     */
    private Mono<PagedResponse<SubscriptionInner>> listSubscriptionsNextPage(String continuationToken) {
        try {
            return service.listNext(this.client.getAzureClient().restClient().getBaseURL().toString(), continuationToken, this.client.acceptLanguage(), this.client.userAgent())
                    .doOnRequest(ignoredValue -> logger.info("Retrieving the next secrets page - Page {}", continuationToken))
                    .doOnSuccess(response -> logger.info("Retrieved the next secrets page - Page {}", continuationToken))
                    .doOnError(error -> logger.warning("Failed to retrieve the next secrets page - Page {}",
                            continuationToken, error));
        } catch (RuntimeException ex) {
            return Mono.error(logger.logExceptionAsError(Exceptions.propagate(ex)));
        }
    }


    /**
     * Gets details about a specified subscription.
     *
     * @param subscriptionId The ID of the target subscription.
     * @return the observable to the SubscriptionInner object
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    public Mono<SubscriptionInner> getAsync(String subscriptionId) {
        if (subscriptionId == null) {
            throw new IllegalArgumentException("Parameter subscriptionId is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.get(subscriptionId, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
                .flatMap(res -> Mono.just(res.getValue()));
    }

    /**
     * The interface defining all the services for Subscriptions to be
     * used by Retrofit to perform actually REST calls.
     */
    @Host("{url}")
    @ServiceInterface(name = "SubscriptionService")
    interface SubscriptionsService {
        @Headers({"Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.resources.Subscriptions listLocations"})
        @Get("subscriptions/{subscriptionId}/locations")
        @ReturnValueWireType(LocationInnerPage.class)
        Mono<PagedResponse<LocationInner>> listLocations(@HostParam("url") String url, @PathParam("subscriptionId") String subscriptionId, @QueryParam("api-version") String apiVersion, @HeaderParam("accept-language") String acceptLanguage, @HeaderParam("User-Agent") String userAgent);

        @Headers({"Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.resources.Subscriptions get"})
        @Get("subscriptions/{subscriptionId}")
        Mono<Response<SubscriptionInner>> get(@PathParam("subscriptionId") String subscriptionId, @QueryParam("api-version") String apiVersion, @HeaderParam("accept-language") String acceptLanguage, @HeaderParam("User-Agent") String userAgent);

        @Headers({"Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.resources.Subscriptions list"})
        @Get("subscriptions")
        @ReturnValueWireType(SubscriptionInnerPage.class)
        Mono<PagedResponse<SubscriptionInner>> list(@HostParam("url") String url, @QueryParam("api-version") String apiVersion, @HeaderParam("accept-language") String acceptLanguage, @HeaderParam("User-Agent") String userAgent);

        @Headers({"Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.resources.Subscriptions listNext"})
        @Get("{nextUrl}")
        Mono<PagedResponse<SubscriptionInner>> listNext(@HostParam("url") String url, @PathParam("nextUrl") String nextUrl, @HeaderParam("accept-language") String acceptLanguage, @HeaderParam("User-Agent") String userAgent);
    }
}
