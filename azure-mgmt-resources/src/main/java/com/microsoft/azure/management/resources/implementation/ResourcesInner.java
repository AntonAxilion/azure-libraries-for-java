/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 * <p>
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.resources.implementation;

import com.azure.core.annotation.*;
import com.azure.core.http.HttpPipeline;
import com.azure.core.http.rest.*;
import com.azure.core.management.PagedList;
import com.azure.core.util.logging.ClientLogger;
import com.azure.core.util.polling.LongRunningOperationStatus;
import com.google.common.reflect.TypeToken;
import com.microsoft.azure.management.resources.GenericResource;
import com.microsoft.azure.management.resources.ResourcesMoveInfo;
import com.microsoft.azure.management.resources.fluentcore.collection.InnerSupportsListing;
import reactor.core.Exceptions;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

/**
 * An instance of this class provides access to all the operations defined
 * in Resources.
 */
public class ResourcesInner implements InnerSupportsListing<GenericResourceInner> {
    /**
     * The Retrofit service to perform REST calls.
     */
    private ResourcesService service;
    /**
     * The service client containing this operation class.
     */
    private ResourceManagementClientImpl client;

    private final ClientLogger logger = new ClientLogger(ResourcesInner.class);

    /**
     * Initializes an instance of ResourcesInner.
     *
     * @param client the instance of the service client containing this operation class.
     */
    public ResourcesInner(HttpPipeline pipeline, ResourceManagementClientImpl client) {
        this.service = RestProxy.create(ResourcesService.class, pipeline);
        this.client = client;
    }

    public GenericResourceInner get(String resourceGroupName, String resourceProviderNamespace, String parentResourcePath, String resourceType, String resourceName, String apiVersion) {
        return getAsync(resourceGroupName, resourceProviderNamespace, parentResourcePath, resourceType, resourceName, apiVersion).block();
    }

    public Mono<GenericResourceInner> getAsync(String resourceGroupName, String resourceProviderNamespace, String parentResourcePath, String resourceType, String resourceName, String apiVersion) {
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (resourceProviderNamespace == null) {
            throw new IllegalArgumentException("Parameter resourceProviderNamespace is required and cannot be null.");
        }
        if (parentResourcePath == null) {
            throw new IllegalArgumentException("Parameter parentResourcePath is required and cannot be null.");
        }
        if (resourceType == null) {
            throw new IllegalArgumentException("Parameter resourceType is required and cannot be null.");
        }
        if (resourceName == null) {
            throw new IllegalArgumentException("Parameter resourceName is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (apiVersion == null) {
            throw new IllegalArgumentException("Parameter apiVersion is required and cannot be null.");
        }
        return service.get(this.getHostUrl(), resourceGroupName, resourceProviderNamespace, parentResourcePath, resourceType, resourceName, this.client.subscriptionId(), apiVersion, this.client.acceptLanguage(), this.client.userAgent())
                .flatMap(res -> Mono.just(res.getValue()));
//                .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<GenericResourceInner>>>() {
//                    @Override
//                    public Observable<ServiceResponse<GenericResourceInner>> call(Response<ResponseBody> response) {
//                        try {
//                            ServiceResponse<GenericResourceInner> clientResponse = getDelegate(response);
//                            return Observable.just(clientResponse);
//                        } catch (Throwable t) {
//                            return Observable.error(t);
//                        }
//                    }
//                });
    }

    public GenericResourceInner getById(String resourceId, String apiVersion) {
        return this.getByIdAsync(resourceId, apiVersion).block();
    }

    /**
     * Gets a resource by ID.
     *
     * @param resourceId The fully qualified ID of the resource, including the resource name and resource type. Use the format, /subscriptions/{guid}/resourceGroups/{resource-group-name}/{resource-provider-namespace}/{resource-type}/{resource-name}
     * @param apiVersion The API version to use for the operation.
     * @return the observable to the GenericResourceInner object
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    public Mono<GenericResourceInner> getByIdAsync(String resourceId, String apiVersion) {
        if (resourceId == null) {
            throw new IllegalArgumentException("Parameter resourceId is required and cannot be null.");
        }
        if (apiVersion == null) {
            throw new IllegalArgumentException("Parameter apiVersion is required and cannot be null.");
        }
        return service.getById(this.getHostUrl(), resourceId, apiVersion, this.client.acceptLanguage(), this.client.userAgent())
                .flatMap(res -> Mono.just(res.getValue()));
//                .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<GenericResourceInner>>>() {
//                    @Override
//                    public Observable<ServiceResponse<GenericResourceInner>> call(Response<ResponseBody> response) {
//                        try {
//                            ServiceResponse<GenericResourceInner> clientResponse = getByIdDelegate(response);
//                            return Observable.just(clientResponse);
//                        } catch (Throwable t) {
//                            return Observable.error(t);
//                        }
//                    }
//                });
    }

    /**
     * Deploys resources to a resource group.
     * You can provide the template and parameters directly in the request or link to JSON files.
     *
     * @param resourceGroupName The name of the resource group to deploy the resources to. The name is case insensitive. The resource group must already exist.
     * @param parameters        Additional parameters supplied to the operation.
     * @return the observable for the request
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    public Mono<GenericResourceInner> createOrUpdateAsync(String resourceGroupName, String resourceProviderNamespace, String parentResourcePath, String resourceType, String resourceName, String apiVersion, GenericResourceInner parameters) {
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (resourceProviderNamespace == null) {
            throw new IllegalArgumentException("Parameter resourceProviderNamespace is required and cannot be null.");
        }
        if (parentResourcePath == null) {
            throw new IllegalArgumentException("Parameter parentResourcePath is required and cannot be null.");
        }
        if (resourceType == null) {
            throw new IllegalArgumentException("Parameter resourceType is required and cannot be null.");
        }
        if (resourceName == null) {
            throw new IllegalArgumentException("Parameter resourceName is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (apiVersion == null) {
            throw new IllegalArgumentException("Parameter apiVersion is required and cannot be null.");
        }
        if (parameters == null) {
            throw new IllegalArgumentException("Parameter parameters is required and cannot be null.");
        }
        // Validator.validate(parameters);
        Mono<Response<GenericResourceInner>> observable = service.createOrUpdate(this.getHostUrl(), resourceGroupName, resourceProviderNamespace, parentResourcePath, resourceType, resourceName, this.client.subscriptionId(), apiVersion, parameters, this.client.acceptLanguage(), this.client.userAgent());
        //  .flatMap(response -> Mono.just(response.getValue()));
        return client.getAzureClient().<GenericResourceInner, GenericResourceInner>getPutOrPatchResultAsync(observable, GenericResourceInner.class, GenericResourceInner.class)
                .last()
                .flatMap(res -> Mono.just(res.getValue().value()));
    }


    /**
     * Deletes a resource by ID.
     *
     * @param resourceId The fully qualified ID of the resource, including the resource name and resource type. Use the format, /subscriptions/{guid}/resourceGroups/{resource-group-name}/{resource-provider-namespace}/{resource-type}/{resource-name}
     * @param apiVersion The API version to use for the operation.
     * @return the observable for the request
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    public Mono<Void> deleteByIdAsync(String resourceId, String apiVersion) {
        if (resourceId == null) {
            throw new IllegalArgumentException("Parameter resourceId is required and cannot be null.");
        }
        if (apiVersion == null) {
            throw new IllegalArgumentException("Parameter apiVersion is required and cannot be null.");
        }
        Mono<Response<Void>> observable = service.deleteById(this.getHostUrl(), resourceId, apiVersion, this.client.acceptLanguage(), this.client.userAgent());
        return client.getAzureClient().getPostOrDeleteResultAsync(observable)
                .takeWhile(apr -> apr.getStatus() == LongRunningOperationStatus.SUCCESSFULLY_COMPLETED)
                .next()
                .flatMap(val -> Mono.just(val.getValue().value()));
    }


    @Override
    public PagedFlux<GenericResourceInner> listAsync() {
        return new PagedFlux<>(
                () -> listResourcesFirstPage(null),
                continuationToken -> listResourcesNextPage(continuationToken));
    }

    @Override
    public PagedFlux<GenericResourceInner> listByResourceGroupAsync(String resourceGroup) {
        return new PagedFlux<>(
                () -> listResourcesByResourceGroupFirstPage(resourceGroup, null),
                continuationToken -> listResourcesByResourceNextPage(continuationToken));
    }

    @Override
    public PagedList<GenericResourceInner> list() {
        PagedResponse<GenericResourceInner> response = listResourcesFirstPage(null).block();
        return new PagedList<GenericResourceInner>(response) {
            @Override
            public Page<GenericResourceInner> nextPage(String nextPageLink) {
                return listResourcesNextPage(nextPageLink).block();
            }
        };
    }

    @Override
    public PagedList<GenericResourceInner> listByResourceGroup(String resourceGroupName) {
        PagedResponse<GenericResourceInner> response = listResourcesByResourceGroupFirstPage(resourceGroupName, null).block();
        return new PagedList<GenericResourceInner>(response) {
            @Override
            public Page<GenericResourceInner> nextPage(String nextPageLink) {
                return listResourcesByResourceNextPage(nextPageLink).block();
            }
        };
    }


    public PagedList<GenericResourceInner> listByResourceGroup(String resourceGroupName, final String filter, final String expand, final Integer top) {
        PagedResponse<GenericResourceInner> response = listResourcesByResourceGroupFirstPage(resourceGroupName, filter).block();
        return new PagedList<GenericResourceInner>(response) {
            @Override
            public Page<GenericResourceInner> nextPage(String nextPageLink) {
                return listResourcesByResourceNextPage(nextPageLink).block();
            }
        };
    }

    public PagedFlux<GenericResourceInner> listByResourceGroupAsync(String resourceGroupName, final String filter, final String expand, final Integer top) {
        return null;
    }


    /*
     * Calls the service and retrieve first page result. It makes one call and retrieve {@code
     * DEFAULT_MAX_PAGE_RESULTS} values.
     */
    private Mono<PagedResponse<GenericResourceInner>> listResourcesByResourceGroupFirstPage(String resourceGroupName, String filter) {
        try {
            return service.listByResourceGroup(this.getHostUrl(), resourceGroupName, this.client.subscriptionId(), filter, null, null, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
                    .doOnRequest(ignored -> logger.info("Listing deployments"))
                    .doOnSuccess(response -> logger.info("Listed deployments"))
                    .doOnError(error -> logger.warning("Failed to list deployments", error));
        } catch (RuntimeException ex) {
            return Mono.error(logger.logExceptionAsError(Exceptions.propagate(ex)));
        }
    }


    /*
     * Gets attributes of all the secrets given by the {@code nextPageLink} that was retrieved from a call to
     * {@link SecretAsyncClient#listSecrets()}.
     *
     * @param continuationToken The {@link PagedResponse#nextLink()} from a previous, successful call to one of the
     * list operations.
     * @return A {@link Mono} of {@link PagedResponse<SecretProperties>} from the next page of results.
     */
    private Mono<PagedResponse<GenericResourceInner>> listResourcesByResourceNextPage(String continuationToken) {
        try {
            return service.listByResourceGroupNext(this.getHostUrl(), continuationToken, this.client.acceptLanguage(), this.client.userAgent())
                    .doOnRequest(ignoredValue -> logger.info("Retrieving the next secrets page - Page {}", continuationToken))
                    .doOnSuccess(response -> logger.info("Retrieved the next secrets page - Page {}", continuationToken))
                    .doOnError(error -> logger.warning("Failed to retrieve the next secrets page - Page {}",
                            continuationToken, error));
        } catch (RuntimeException ex) {
            return Mono.error(logger.logExceptionAsError(Exceptions.propagate(ex)));
        }
    }


    /*
     * Calls the service and retrieve first page result. It makes one call and retrieve {@code
     * DEFAULT_MAX_PAGE_RESULTS} values.
     */
    private Mono<PagedResponse<GenericResourceInner>> listResourcesFirstPage(String filter) {
        try {
            return service.list(this.getHostUrl(), this.client.subscriptionId(), filter, null, null, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
                    .doOnRequest(ignored -> logger.info("Listing deployments"))
                    .doOnSuccess(response -> logger.info("Listed deployments"))
                    .doOnError(error -> logger.warning("Failed to list deployments", error));
        } catch (RuntimeException ex) {
            return Mono.error(logger.logExceptionAsError(Exceptions.propagate(ex)));
        }
    }


    /*
     * Gets attributes of all the secrets given by the {@code nextPageLink} that was retrieved from a call to
     * {@link SecretAsyncClient#listSecrets()}.
     *
     * @param continuationToken The {@link PagedResponse#nextLink()} from a previous, successful call to one of the
     * list operations.
     * @return A {@link Mono} of {@link PagedResponse<SecretProperties>} from the next page of results.
     */
    private Mono<PagedResponse<GenericResourceInner>> listResourcesNextPage(String continuationToken) {
        try {
            return service.listByResourceGroupNext(this.getHostUrl(), continuationToken, this.client.acceptLanguage(), this.client.userAgent())
                    .doOnRequest(ignoredValue -> logger.info("Retrieving the next secrets page - Page {}", continuationToken))
                    .doOnSuccess(response -> logger.info("Retrieved the next secrets page - Page {}", continuationToken))
                    .doOnError(error -> logger.warning("Failed to retrieve the next secrets page - Page {}",
                            continuationToken, error));
        } catch (RuntimeException ex) {
            return Mono.error(logger.logExceptionAsError(Exceptions.propagate(ex)));
        }
    }

    public Boolean checkExistence(String resourceGroupName, String resourceProviderNamespace, String parentResourcePath, String resourceType, String resourceName, String apiVersion) {
        return checkExistenceAsync(resourceGroupName, resourceProviderNamespace, parentResourcePath, resourceType, resourceName, apiVersion).block();
    }

    public Mono<Boolean> checkExistenceAsync(String resourceGroupName, String resourceProviderNamespace, String parentResourcePath, String resourceType, String resourceName, String apiVersion) {
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (resourceProviderNamespace == null) {
            throw new IllegalArgumentException("Parameter resourceProviderNamespace is required and cannot be null.");
        }
        if (parentResourcePath == null) {
            throw new IllegalArgumentException("Parameter parentResourcePath is required and cannot be null.");
        }
        if (resourceType == null) {
            throw new IllegalArgumentException("Parameter resourceType is required and cannot be null.");
        }
        if (resourceName == null) {
            throw new IllegalArgumentException("Parameter resourceName is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (apiVersion == null) {
            throw new IllegalArgumentException("Parameter apiVersion is required and cannot be null.");
        }
        return service.checkExistence(this.getHostUrl(), resourceGroupName, resourceProviderNamespace, parentResourcePath, resourceType, resourceName, this.client.subscriptionId(), apiVersion, this.client.acceptLanguage(), this.client.userAgent())
                .flatMap(res -> Mono.just(res.getValue()));
//                .flatMap(new Func1<Response<Void>, Observable<ServiceResponse<Boolean>>>() {
//                    @Override
//                    public Observable<ServiceResponse<Boolean>> call(Response<Void> response) {
//                        try {
//                            ServiceResponse<Boolean> clientResponse = checkExistenceDelegate(response);
//                            return Observable.just(clientResponse);
//                        } catch (Throwable t) {
//                            return Observable.error(t);
//                        }
//                    }
//                });
    }

    public Boolean checkExistenceById(String resourceId, String apiVersion) {
        return this.checkExistenceByIdAsync(resourceId, apiVersion).block();
    }

    public Mono<Boolean> checkExistenceByIdAsync(String resourceId, String apiVersion) {
        if (resourceId == null) {
            throw new IllegalArgumentException("Parameter resourceId is required and cannot be null.");
        }
        if (apiVersion == null) {
            throw new IllegalArgumentException("Parameter apiVersion is required and cannot be null.");
        }
        return service.checkExistenceById(this.getHostUrl(),  resourceId, apiVersion, this.client.acceptLanguage(), this.client.userAgent())
                .flatMap(res -> Mono.just(res.getValue()));
//                .flatMap(new Func1<Response<Void>, Observable<ServiceResponse<Boolean>>>() {
//                    @Override
//                    public Observable<ServiceResponse<Boolean>> call(Response<Void> response) {
//                        try {
//                            ServiceResponse<Boolean> clientResponse = checkExistenceByIdDelegate(response);
//                            return Observable.just(clientResponse);
//                        } catch (Throwable t) {
//                            return Observable.error(t);
//                        }
//                    }
//                });
    }

//    public Mono<GenericResourceInner> getAsync(String resourceGroupName, String resourceProviderNamespace, String parentResourcePath, String resourceType, String resourceName, String apiVersion) {
//        if (resourceGroupName == null) {
//            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
//        }
//        if (resourceProviderNamespace == null) {
//            throw new IllegalArgumentException("Parameter resourceProviderNamespace is required and cannot be null.");
//        }
//        if (parentResourcePath == null) {
//            throw new IllegalArgumentException("Parameter parentResourcePath is required and cannot be null.");
//        }
//        if (resourceType == null) {
//            throw new IllegalArgumentException("Parameter resourceType is required and cannot be null.");
//        }
//        if (resourceName == null) {
//            throw new IllegalArgumentException("Parameter resourceName is required and cannot be null.");
//        }
//        if (this.client.subscriptionId() == null) {
//            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
//        }
//        if (apiVersion == null) {
//            throw new IllegalArgumentException("Parameter apiVersion is required and cannot be null.");
//        }
//        return service.get(resourceGroupName, resourceProviderNamespace, parentResourcePath, resourceType, resourceName, this.client.subscriptionId(), apiVersion, this.client.acceptLanguage(), this.client.userAgent())
//                .flatMap(res -> Mono.just(res.getValue()));
////                .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<GenericResourceInner>>>() {
////                    @Override
////                    public Observable<ServiceResponse<GenericResourceInner>> call(Response<ResponseBody> response) {
////                        try {
////                            ServiceResponse<GenericResourceInner> clientResponse = getDelegate(response);
////                            return Observable.just(clientResponse);
////                        } catch (Throwable t) {
////                            return Observable.error(t);
////                        }
////                    }
////                });
//    }


    /**
     * The interface defining all the services for Resources to be
     * used by Retrofit to perform actually REST calls.
     */

    public Mono<Void> moveResourcesAsync(String sourceResourceGroupName, ResourcesMoveInfo parameters) {
        if (sourceResourceGroupName == null) {
            throw new IllegalArgumentException("Parameter sourceResourceGroupName is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (parameters == null) {
            throw new IllegalArgumentException("Parameter parameters is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        // Validator.validate(parameters);
        Mono<Response<Void>> observable = service.moveResources(this.getHostUrl(), sourceResourceGroupName, this.client.subscriptionId(), parameters, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent());
        return client.getAzureClient().getPostOrDeleteResultAsync(observable)
                .then();
    }

    public Mono<Void> deleteAsync(String resourceGroupName, String resourceProviderNamespace, String parentResourcePath, String resourceType, String resourceName, String apiVersion) {
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (resourceProviderNamespace == null) {
            throw new IllegalArgumentException("Parameter resourceProviderNamespace is required and cannot be null.");
        }
        if (parentResourcePath == null) {
            throw new IllegalArgumentException("Parameter parentResourcePath is required and cannot be null.");
        }
        if (resourceType == null) {
            throw new IllegalArgumentException("Parameter resourceType is required and cannot be null.");
        }
        if (resourceName == null) {
            throw new IllegalArgumentException("Parameter resourceName is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (apiVersion == null) {
            throw new IllegalArgumentException("Parameter apiVersion is required and cannot be null.");
        }
        Mono<Response<Void>> observable = service.delete(this.getHostUrl(), resourceGroupName, resourceProviderNamespace, parentResourcePath, resourceType, resourceName, this.client.subscriptionId(), apiVersion, this.client.acceptLanguage(), this.client.userAgent());
        return client.getAzureClient().getPostOrDeleteResultAsync(observable)
                .then();
    }

    private String getHostUrl() {
        return this.client.getAzureClient().restClient().getBaseURL().toString();
    }

    @Host("{url}")
    @ServiceInterface(name = "ResourcesService")
    interface ResourcesService {
        @Headers({"Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.resources.Resources listByResourceGroup"})
        @Get("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/resources")
        @ReturnValueWireType(GenericResourceInnerPage.class)
        Mono<PagedResponse<GenericResourceInner>> listByResourceGroup(@HostParam("url") String url, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("subscriptionId") String subscriptionId, @QueryParam("$filter") String filter, @QueryParam("$expand") String expand, @QueryParam("$top") Integer top, @QueryParam("api-version") String apiVersion, @HeaderParam("accept-language") String acceptLanguage, @HeaderParam("User-Agent") String userAgent);

        @Headers({"Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.resources.Resources moveResources"})
        @Post("subscriptions/{subscriptionId}/resourceGroups/{sourceResourceGroupName}/moveResources")
        Mono<Response<Void>> moveResources(@HostParam("url") String url, @PathParam("sourceResourceGroupName") String sourceResourceGroupName, @PathParam("subscriptionId") String subscriptionId, @BodyParam("body") ResourcesMoveInfo parameters, @QueryParam("api-version") String apiVersion, @HeaderParam("accept-language") String acceptLanguage, @HeaderParam("User-Agent") String userAgent);

        @Headers({"Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.resources.Resources beginMoveResources"})
        @Post("subscriptions/{subscriptionId}/resourceGroups/{sourceResourceGroupName}/moveResources")
        Mono<Response<Void>> beginMoveResources(@HostParam("url") String url, @PathParam("sourceResourceGroupName") String sourceResourceGroupName, @PathParam("subscriptionId") String subscriptionId, @BodyParam("body") ResourcesMoveInfo parameters, @QueryParam("api-version") String apiVersion, @HeaderParam("accept-language") String acceptLanguage, @HeaderParam("User-Agent") String userAgent);

        @Headers({"Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.resources.Resources validateMoveResources"})
        @Post("subscriptions/{subscriptionId}/resourceGroups/{sourceResourceGroupName}/validateMoveResources")
        Mono<Response<Void>> validateMoveResources(@HostParam("url") String url, @PathParam("sourceResourceGroupName") String sourceResourceGroupName, @PathParam("subscriptionId") String subscriptionId, @BodyParam("body") ResourcesMoveInfo parameters, @QueryParam("api-version") String apiVersion, @HeaderParam("accept-language") String acceptLanguage, @HeaderParam("User-Agent") String userAgent);

        @Headers({"Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.resources.Resources beginValidateMoveResources"})
        @Post("subscriptions/{subscriptionId}/resourceGroups/{sourceResourceGroupName}/validateMoveResources")
        Mono<Response<Void>> beginValidateMoveResources(@PathParam("sourceResourceGroupName") String sourceResourceGroupName, @PathParam("subscriptionId") String subscriptionId, @BodyParam("body") ResourcesMoveInfo parameters, @QueryParam("api-version") String apiVersion, @HeaderParam("accept-language") String acceptLanguage, @HeaderParam("User-Agent") String userAgent);

        @Headers({"Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.resources.Resources list"})
        @Get("subscriptions/{subscriptionId}/resources")
        Mono<PagedResponse<GenericResourceInner>> list(@HostParam("url") String url, @PathParam("subscriptionId") String subscriptionId, @QueryParam("$filter") String filter, @QueryParam("$expand") String expand, @QueryParam("$top") Integer top, @QueryParam("api-version") String apiVersion, @HeaderParam("accept-language") String acceptLanguage, @HeaderParam("User-Agent") String userAgent);

        @Headers({"Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.resources.Resources checkExistence"})
        @Head("subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{parentResourcePath}/{resourceType}/{resourceName}")
        @ExpectedResponses({200, 204, 404})
        Mono<Response<Boolean>> checkExistence(@HostParam("url") String url, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("resourceProviderNamespace") String resourceProviderNamespace, @PathParam(value = "parentResourcePath", encoded = true) String parentResourcePath, @PathParam(value = "resourceType", encoded = true) String resourceType, @PathParam("resourceName") String resourceName, @PathParam("subscriptionId") String subscriptionId, @QueryParam("api-version") String apiVersion, @HeaderParam("accept-language") String acceptLanguage, @HeaderParam("User-Agent") String userAgent);

        @Headers({"Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.resources.Resources delete"})
        @Delete("subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{parentResourcePath}/{resourceType}/{resourceName}")
        Mono<Response<Void>> delete(@HostParam("url") String url, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("resourceProviderNamespace") String resourceProviderNamespace, @PathParam(value = "parentResourcePath", encoded = true) String parentResourcePath, @PathParam(value = "resourceType", encoded = true) String resourceType, @PathParam("resourceName") String resourceName, @PathParam("subscriptionId") String subscriptionId, @QueryParam("api-version") String apiVersion, @HeaderParam("accept-language") String acceptLanguage, @HeaderParam("User-Agent") String userAgent);

        @Headers({"Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.resources.Resources beginDelete"})
        @Delete("subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{parentResourcePath}/{resourceType}/{resourceName}")
        Mono<Response<Void>> beginDelete(@HostParam("url") String url, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("resourceProviderNamespace") String resourceProviderNamespace, @PathParam(value = "parentResourcePath", encoded = true) String parentResourcePath, @PathParam(value = "resourceType", encoded = true) String resourceType, @PathParam("resourceName") String resourceName, @PathParam("subscriptionId") String subscriptionId, @QueryParam("api-version") String apiVersion, @HeaderParam("accept-language") String acceptLanguage, @HeaderParam("User-Agent") String userAgent);

        @Headers({"Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.resources.Resources createOrUpdate"})
        @Put("subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{parentResourcePath}/{resourceType}/{resourceName}")
        Mono<Response<GenericResourceInner>> createOrUpdate(@HostParam("url") String url, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("resourceProviderNamespace") String resourceProviderNamespace, @PathParam(value = "parentResourcePath", encoded = true) String parentResourcePath, @PathParam(value = "resourceType", encoded = true) String resourceType, @PathParam("resourceName") String resourceName, @PathParam("subscriptionId") String subscriptionId, @QueryParam("api-version") String apiVersion, @BodyParam("body") GenericResourceInner parameters, @HeaderParam("accept-language") String acceptLanguage, @HeaderParam("User-Agent") String userAgent);

        @Headers({"Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.resources.Resources beginCreateOrUpdate"})
        @Put("subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{parentResourcePath}/{resourceType}/{resourceName}")
        Mono<Response<GenericResourceInner>> beginCreateOrUpdate(@HostParam("url") String url, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("resourceProviderNamespace") String resourceProviderNamespace, @PathParam(value = "parentResourcePath", encoded = true) String parentResourcePath, @PathParam(value = "resourceType", encoded = true) String resourceType, @PathParam("resourceName") String resourceName, @PathParam("subscriptionId") String subscriptionId, @QueryParam("api-version") String apiVersion, @BodyParam("body") GenericResourceInner parameters, @HeaderParam("accept-language") String acceptLanguage, @HeaderParam("User-Agent") String userAgent);

        @Headers({"Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.resources.Resources update"})
        @Patch("subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{parentResourcePath}/{resourceType}/{resourceName}")
        Mono<Response<GenericResourceInner>> update(@HostParam("url") String url, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("resourceProviderNamespace") String resourceProviderNamespace, @PathParam(value = "parentResourcePath", encoded = true) String parentResourcePath, @PathParam(value = "resourceType", encoded = true) String resourceType, @PathParam("resourceName") String resourceName, @PathParam("subscriptionId") String subscriptionId, @QueryParam("api-version") String apiVersion, @BodyParam("body") GenericResourceInner parameters, @HeaderParam("accept-language") String acceptLanguage, @HeaderParam("User-Agent") String userAgent);

        @Headers({"Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.resources.Resources beginUpdate"})
        @Patch("subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{parentResourcePath}/{resourceType}/{resourceName}")
        Mono<Response<GenericResourceInner>> beginUpdate(@PathParam("resourceGroupName") String resourceGroupName, @PathParam("resourceProviderNamespace") String resourceProviderNamespace, @PathParam(value = "parentResourcePath", encoded = true) String parentResourcePath, @PathParam(value = "resourceType", encoded = true) String resourceType, @PathParam("resourceName") String resourceName, @PathParam("subscriptionId") String subscriptionId, @QueryParam("api-version") String apiVersion, @BodyParam("body") GenericResourceInner parameters, @HeaderParam("accept-language") String acceptLanguage, @HeaderParam("User-Agent") String userAgent);

        @Headers({"Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.resources.Resources get"})
        @Get("subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{parentResourcePath}/{resourceType}/{resourceName}")
        Mono<Response<GenericResourceInner>> get(@HostParam("url") String url, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("resourceProviderNamespace") String resourceProviderNamespace, @PathParam(value = "parentResourcePath", encoded = true) String parentResourcePath, @PathParam(value = "resourceType", encoded = true) String resourceType, @PathParam("resourceName") String resourceName, @PathParam("subscriptionId") String subscriptionId, @QueryParam("api-version") String apiVersion, @HeaderParam("accept-language") String acceptLanguage, @HeaderParam("User-Agent") String userAgent);

        @Headers({"Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.resources.Resources checkExistenceById"})
        @Head("{resourceId}")
        @ExpectedResponses({200, 204, 404})
        Mono<Response<Boolean>> checkExistenceById(@HostParam("url") String url, @PathParam(value = "resourceId", encoded = true) String resourceId, @QueryParam("api-version") String apiVersion, @HeaderParam("accept-language") String acceptLanguage, @HeaderParam("User-Agent") String userAgent);

        @Headers({"Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.resources.Resources deleteById"})
        @Delete("{resourceId}")
        Mono<Response<Void>> deleteById(@HostParam("url") String url, @PathParam(value = "resourceId", encoded = true) String resourceId, @QueryParam("api-version") String apiVersion, @HeaderParam("accept-language") String acceptLanguage, @HeaderParam("User-Agent") String userAgent);

        @Headers({"Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.resources.Resources beginDeleteById"})
        @Delete("{resourceId}")
        Mono<Response<Void>> beginDeleteById(@PathParam(value = "resourceId", encoded = true) String resourceId, @QueryParam("api-version") String apiVersion, @HeaderParam("accept-language") String acceptLanguage, @HeaderParam("User-Agent") String userAgent);

        @Headers({"Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.resources.Resources createOrUpdateById"})
        @Put("{resourceId}")
        Mono<Response<GenericResourceInner>> createOrUpdateById(@PathParam(value = "resourceId", encoded = true) String resourceId, @QueryParam("api-version") String apiVersion, @BodyParam("body") GenericResourceInner parameters, @HeaderParam("accept-language") String acceptLanguage, @HeaderParam("User-Agent") String userAgent);

        @Headers({"Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.resources.Resources beginCreateOrUpdateById"})
        @Put("{resourceId}")
        Mono<Response<GenericResourceInner>> beginCreateOrUpdateById(@PathParam(value = "resourceId", encoded = true) String resourceId, @QueryParam("api-version") String apiVersion, @BodyParam("body") GenericResourceInner parameters, @HeaderParam("accept-language") String acceptLanguage, @HeaderParam("User-Agent") String userAgent);

        @Headers({"Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.resources.Resources updateById"})
        @Patch("{resourceId}")
        Mono<Response<GenericResourceInner>> updateById(@PathParam(value = "resourceId", encoded = true) String resourceId, @QueryParam("api-version") String apiVersion, @BodyParam("body") GenericResourceInner parameters, @HeaderParam("accept-language") String acceptLanguage, @HeaderParam("User-Agent") String userAgent);

        @Headers({"Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.resources.Resources beginUpdateById"})
        @Patch("{resourceId}")
        Mono<Response<GenericResourceInner>> beginUpdateById(@PathParam(value = "resourceId", encoded = true) String resourceId, @QueryParam("api-version") String apiVersion, @BodyParam("body") GenericResourceInner parameters, @HeaderParam("accept-language") String acceptLanguage, @HeaderParam("User-Agent") String userAgent);

        @Headers({"Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.resources.Resources getById"})
        @Get("{resourceId}")
        Mono<Response<GenericResourceInner>> getById(@HostParam("url") String url, @PathParam(value = "resourceId", encoded = true) String resourceId, @QueryParam("api-version") String apiVersion, @HeaderParam("accept-language") String acceptLanguage, @HeaderParam("User-Agent") String userAgent);

        @Headers({"Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.resources.Resources listByResourceGroupNext"})
        @Get("{nextUrl}")
        Mono<PagedResponse<GenericResourceInner>> listByResourceGroupNext(@HostParam("url") String url, @PathParam("nextUrl") String nextUrl, @HeaderParam("accept-language") String acceptLanguage, @HeaderParam("User-Agent") String userAgent);

        @Headers({"Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.resources.Resources listNext"})
        @Get("{nextUrl}")
        Mono<Response<Page<GenericResourceInner>>> listNext(@HostParam("url") String url, @PathParam("nextUrl") String nextUrl, @HeaderParam("accept-language") String acceptLanguage, @HeaderParam("User-Agent") String userAgent);

    }

}
