// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
// 
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.management.network.models;

import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.Delete;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.Put;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.http.rest.PagedFlux;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.PagedResponse;
import com.azure.core.http.rest.PagedResponseBase;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.polling.AsyncPollResponse;
import com.azure.management.network.ErrorResponseException;
import java.nio.ByteBuffer;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

/**
 * An instance of this class provides access to all the operations defined in
 * FlowLogs.
 */
public final class FlowLogsInner {
    /**
     * The proxy service used to perform REST calls.
     */
    private FlowLogsService service;

    /**
     * The service client containing this operation class.
     */
    private NetworkManagementClientImpl client;

    /**
     * Initializes an instance of FlowLogsInner.
     * 
     * @param client the instance of the service client containing this operation class.
     */
    public FlowLogsInner(NetworkManagementClientImpl client) {
        this.service = RestProxy.create(FlowLogsService.class, client.getHttpPipeline(), client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for
     * NetworkManagementClientFlowLogs to be used by the proxy service to
     * perform REST calls.
     */
    @Host("{$host}")
    @ServiceInterface(name = "NetworkManagementClientFlowLogs")
    private interface FlowLogsService {
        @Put("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkWatchers/{networkWatcherName}/flowLogs/{flowLogName}")
        @ExpectedResponses({200, 201})
        @UnexpectedResponseExceptionType(ErrorResponseException.class)
        Mono<SimpleResponse<Flux<ByteBuffer>>> createOrUpdate(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("networkWatcherName") String networkWatcherName, @PathParam("flowLogName") String flowLogName, @PathParam("subscriptionId") String subscriptionId, @BodyParam("application/json") FlowLogInner parameters, @QueryParam("api-version") String apiVersion);

        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkWatchers/{networkWatcherName}/flowLogs/{flowLogName}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorResponseException.class)
        Mono<SimpleResponse<FlowLogInner>> get(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("networkWatcherName") String networkWatcherName, @PathParam("flowLogName") String flowLogName, @PathParam("subscriptionId") String subscriptionId, @QueryParam("api-version") String apiVersion);

        @Delete("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkWatchers/{networkWatcherName}/flowLogs/{flowLogName}")
        @ExpectedResponses({202, 204})
        @UnexpectedResponseExceptionType(ErrorResponseException.class)
        Mono<SimpleResponse<Flux<ByteBuffer>>> delete(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("networkWatcherName") String networkWatcherName, @PathParam("flowLogName") String flowLogName, @PathParam("subscriptionId") String subscriptionId, @QueryParam("api-version") String apiVersion);

        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkWatchers/{networkWatcherName}/flowLogs")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorResponseException.class)
        Mono<SimpleResponse<FlowLogListResultInner>> list(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("networkWatcherName") String networkWatcherName, @PathParam("subscriptionId") String subscriptionId, @QueryParam("api-version") String apiVersion);

        @Put("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkWatchers/{networkWatcherName}/flowLogs/{flowLogName}")
        @ExpectedResponses({200, 201})
        @UnexpectedResponseExceptionType(ErrorResponseException.class)
        Mono<SimpleResponse<FlowLogInner>> beginCreateOrUpdate(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("networkWatcherName") String networkWatcherName, @PathParam("flowLogName") String flowLogName, @PathParam("subscriptionId") String subscriptionId, @BodyParam("application/json") FlowLogInner parameters, @QueryParam("api-version") String apiVersion);

        @Delete("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkWatchers/{networkWatcherName}/flowLogs/{flowLogName}")
        @ExpectedResponses({202, 204})
        @UnexpectedResponseExceptionType(ErrorResponseException.class)
        Mono<Response<Void>> beginDelete(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("networkWatcherName") String networkWatcherName, @PathParam("flowLogName") String flowLogName, @PathParam("subscriptionId") String subscriptionId, @QueryParam("api-version") String apiVersion);

        @Get("{nextLink}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorResponseException.class)
        Mono<SimpleResponse<FlowLogListResultInner>> listNext(@PathParam(value = "nextLink", encoded = true) String nextLink);
    }

    /**
     * Create or update a flow log for the specified network security group.
     * 
     * @param resourceGroupName 
     * @param networkWatcherName 
     * @param flowLogName 
     * @param parameters A flow log resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<Flux<ByteBuffer>>> createOrUpdateWithResponseAsync(String resourceGroupName, String networkWatcherName, String flowLogName, FlowLogInner parameters) {
        final String apiVersion = "2019-11-01";
        return service.createOrUpdate(this.client.getHost(), resourceGroupName, networkWatcherName, flowLogName, this.client.getSubscriptionId(), parameters, apiVersion);
    }

    /**
     * Create or update a flow log for the specified network security group.
     * 
     * @param resourceGroupName 
     * @param networkWatcherName 
     * @param flowLogName 
     * @param parameters A flow log resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<FlowLogInner> createOrUpdateAsync(String resourceGroupName, String networkWatcherName, String flowLogName, FlowLogInner parameters) {
        Mono<SimpleResponse<Flux<ByteBuffer>>> response = createOrUpdateWithResponseAsync(resourceGroupName, networkWatcherName, flowLogName, parameters);
        return client.<FlowLogInner, FlowLogInner>getLroResultAsync(response, client.getHttpPipeline(), FlowLogInner.class, FlowLogInner.class)
            .last()
            .flatMap(AsyncPollResponse::getFinalResult);
    }

    /**
     * Create or update a flow log for the specified network security group.
     * 
     * @param resourceGroupName 
     * @param networkWatcherName 
     * @param flowLogName 
     * @param parameters A flow log resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public FlowLogInner createOrUpdate(String resourceGroupName, String networkWatcherName, String flowLogName, FlowLogInner parameters) {
        return createOrUpdateAsync(resourceGroupName, networkWatcherName, flowLogName, parameters).block();
    }

    /**
     * Gets a flow log resource by name.
     * 
     * @param resourceGroupName 
     * @param networkWatcherName 
     * @param flowLogName 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<FlowLogInner>> getWithResponseAsync(String resourceGroupName, String networkWatcherName, String flowLogName) {
        final String apiVersion = "2019-11-01";
        return service.get(this.client.getHost(), resourceGroupName, networkWatcherName, flowLogName, this.client.getSubscriptionId(), apiVersion);
    }

    /**
     * Gets a flow log resource by name.
     * 
     * @param resourceGroupName 
     * @param networkWatcherName 
     * @param flowLogName 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<FlowLogInner> getAsync(String resourceGroupName, String networkWatcherName, String flowLogName) {
        return getWithResponseAsync(resourceGroupName, networkWatcherName, flowLogName)
            .flatMap((SimpleResponse<FlowLogInner> res) -> {
                if (res.getValue() != null) {
                    return Mono.just(res.getValue());
                } else {
                    return Mono.empty();
                }
            });
    }

    /**
     * Gets a flow log resource by name.
     * 
     * @param resourceGroupName 
     * @param networkWatcherName 
     * @param flowLogName 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public FlowLogInner get(String resourceGroupName, String networkWatcherName, String flowLogName) {
        return getAsync(resourceGroupName, networkWatcherName, flowLogName).block();
    }

    /**
     * Deletes the specified flow log resource.
     * 
     * @param resourceGroupName 
     * @param networkWatcherName 
     * @param flowLogName 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<Flux<ByteBuffer>>> deleteWithResponseAsync(String resourceGroupName, String networkWatcherName, String flowLogName) {
        final String apiVersion = "2019-11-01";
        return service.delete(this.client.getHost(), resourceGroupName, networkWatcherName, flowLogName, this.client.getSubscriptionId(), apiVersion);
    }

    /**
     * Deletes the specified flow log resource.
     * 
     * @param resourceGroupName 
     * @param networkWatcherName 
     * @param flowLogName 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> deleteAsync(String resourceGroupName, String networkWatcherName, String flowLogName) {
        Mono<SimpleResponse<Flux<ByteBuffer>>> response = deleteWithResponseAsync(resourceGroupName, networkWatcherName, flowLogName);
        return client.<Void, Void>getLroResultAsync(response, client.getHttpPipeline(), Void.class, Void.class)
            .last()
            .flatMap(AsyncPollResponse::getFinalResult);
    }

    /**
     * Deletes the specified flow log resource.
     * 
     * @param resourceGroupName 
     * @param networkWatcherName 
     * @param flowLogName 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void delete(String resourceGroupName, String networkWatcherName, String flowLogName) {
        deleteAsync(resourceGroupName, networkWatcherName, flowLogName).block();
    }

    /**
     * Lists all flow log resources for the specified Network Watcher.
     * 
     * @param resourceGroupName 
     * @param networkWatcherName 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<FlowLogInner>> listSinglePageAsync(String resourceGroupName, String networkWatcherName) {
        final String apiVersion = "2019-11-01";
        return service.list(this.client.getHost(), resourceGroupName, networkWatcherName, this.client.getSubscriptionId(), apiVersion).map(res -> new PagedResponseBase<>(
            res.getRequest(),
            res.getStatusCode(),
            res.getHeaders(),
            res.getValue().value(),
            res.getValue().nextLink(),
            null));
    }

    /**
     * Lists all flow log resources for the specified Network Watcher.
     * 
     * @param resourceGroupName 
     * @param networkWatcherName 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<FlowLogInner> listAsync(String resourceGroupName, String networkWatcherName) {
        return new PagedFlux<>(
            () -> listSinglePageAsync(resourceGroupName, networkWatcherName),
            nextLink -> listNextSinglePageAsync(nextLink));
    }

    /**
     * Lists all flow log resources for the specified Network Watcher.
     * 
     * @param resourceGroupName 
     * @param networkWatcherName 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<FlowLogInner> list(String resourceGroupName, String networkWatcherName) {
        return new PagedIterable<>(listAsync(resourceGroupName, networkWatcherName));
    }

    /**
     * Create or update a flow log for the specified network security group.
     * 
     * @param resourceGroupName 
     * @param networkWatcherName 
     * @param flowLogName 
     * @param parameters A flow log resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<FlowLogInner>> beginCreateOrUpdateWithResponseAsync(String resourceGroupName, String networkWatcherName, String flowLogName, FlowLogInner parameters) {
        final String apiVersion = "2019-11-01";
        return service.beginCreateOrUpdate(this.client.getHost(), resourceGroupName, networkWatcherName, flowLogName, this.client.getSubscriptionId(), parameters, apiVersion);
    }

    /**
     * Create or update a flow log for the specified network security group.
     * 
     * @param resourceGroupName 
     * @param networkWatcherName 
     * @param flowLogName 
     * @param parameters A flow log resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<FlowLogInner> beginCreateOrUpdateAsync(String resourceGroupName, String networkWatcherName, String flowLogName, FlowLogInner parameters) {
        return beginCreateOrUpdateWithResponseAsync(resourceGroupName, networkWatcherName, flowLogName, parameters)
            .flatMap((SimpleResponse<FlowLogInner> res) -> {
                if (res.getValue() != null) {
                    return Mono.just(res.getValue());
                } else {
                    return Mono.empty();
                }
            });
    }

    /**
     * Create or update a flow log for the specified network security group.
     * 
     * @param resourceGroupName 
     * @param networkWatcherName 
     * @param flowLogName 
     * @param parameters A flow log resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public FlowLogInner beginCreateOrUpdate(String resourceGroupName, String networkWatcherName, String flowLogName, FlowLogInner parameters) {
        return beginCreateOrUpdateAsync(resourceGroupName, networkWatcherName, flowLogName, parameters).block();
    }

    /**
     * Deletes the specified flow log resource.
     * 
     * @param resourceGroupName 
     * @param networkWatcherName 
     * @param flowLogName 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> beginDeleteWithResponseAsync(String resourceGroupName, String networkWatcherName, String flowLogName) {
        final String apiVersion = "2019-11-01";
        return service.beginDelete(this.client.getHost(), resourceGroupName, networkWatcherName, flowLogName, this.client.getSubscriptionId(), apiVersion);
    }

    /**
     * Deletes the specified flow log resource.
     * 
     * @param resourceGroupName 
     * @param networkWatcherName 
     * @param flowLogName 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> beginDeleteAsync(String resourceGroupName, String networkWatcherName, String flowLogName) {
        return beginDeleteWithResponseAsync(resourceGroupName, networkWatcherName, flowLogName)
            .flatMap((Response<Void> res) -> Mono.empty());
    }

    /**
     * Deletes the specified flow log resource.
     * 
     * @param resourceGroupName 
     * @param networkWatcherName 
     * @param flowLogName 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void beginDelete(String resourceGroupName, String networkWatcherName, String flowLogName) {
        beginDeleteAsync(resourceGroupName, networkWatcherName, flowLogName).block();
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink null
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<FlowLogInner>> listNextSinglePageAsync(String nextLink) {
        return service.listNext(nextLink).map(res -> new PagedResponseBase<>(
            res.getRequest(),
            res.getStatusCode(),
            res.getHeaders(),
            res.getValue().value(),
            res.getValue().nextLink(),
            null));
    }
}
